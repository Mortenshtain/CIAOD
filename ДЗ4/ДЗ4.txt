#include <iostream>
#include <chrono>
#include <cmath>
using namespace std;


int
main ()
{
    int num;
    cout << "input number" << endl;
    cin >> num;
    int iterator;
    int mode;
    cout << "type of massive (0 - random from 1 to n) (1 - increasing from 0 to n-1) (2 - decreasing from n-1 to 0)" << endl;
    cin >> mode;
    bool val;
    for (int z = 2; z < 7; z++)
    {
        int comparisons = 0;
        int n = pow(10, z);
        int* A = new int[n];
        switch(mode)
        {
            case 0:
                for(int i=0; i<n; i++)
                {
                    A[i] = rand() % n+1;
                }
                break;
            case 1:
                for(int i=0; i<n; i++)
                {
                    A[i] = i;
                }
                break;
            case 2:
                for(int i=n; i>0; i--)
                {
                    A[i] = n - i;
                }
                break;
        }
        auto start = chrono::steady_clock::now();
        for(int i=0; i<n; i++)
        {
            comparisons++;
            if(A[i]==num)
            {
                iterator=i;
                val=true;
                break;
            }
            if(i==n-1)
            {
                val=false;
            }
        }
        auto end = chrono::steady_clock::now();
        auto work_time = chrono::duration_cast<chrono::milliseconds>(end - start);
        cout << "n = " << n << "   ";
        cout << "time = " << work_time.count() << "   ";
        cout << "comparisons = " << comparisons << "   ";
        if(val)
        {
            cout << "iterator = " << iterator << endl;
        }
        else
        {
            cout << "None" << endl;
        }
        
    }  
}

